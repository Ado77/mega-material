import{a as e,b as t,c as o,d as i,e as n,g as a,f as s}from"./common.js";import"./icon.js";import"./ripple.js";let r=class extends e{constructor(){super(...arguments),this.on=!1,this.icon="",this.iconOn="",this.label="",this.disabled=!1}static get styles(){return[t,o`:host{display:inline-flex;contain:content}mega-ripple{width:var(--mega-icon-button-size,48px);height:var(--mega-icon-button-size,48px)}button{will-change:transform,opacity;width:100%;height:100%;padding:var(--mega-icon-button-padding,12px);display:inline-block;position:relative;box-sizing:border-box;border:none;outline:0;background-color:transparent;fill:currentColor;color:inherit;text-decoration:none;cursor:pointer;user-select:none},::slotted(img) ::slotted(mega-icon),::slotted(svg){width:var(--mega-icon-size,24px);height:var(--mega-icon-size,24px);display:inline-block}:host([on]) slot:not([name]){display:none}:host(:not([on])) slot[name]{display:none}:host:disabled{color:var(--mega-theme-text-disabled-on-light,rgba(0,0,0,.38));cursor:default;pointer-events:none}`]}render(){return i`<mega-ripple unbounded><button aria-label=${this.label} aria-hidden=true aria-pressed=false><slot><mega-icon>${this.icon}</mega-icon></slot><slot name=on><mega-icon>${this.iconOn}</mega-icon></slot></button></mega-ripple>`}};n([a({type:Boolean,reflect:!0})],r.prototype,"on",void 0),n([a({type:String})],r.prototype,"icon",void 0),n([a({type:String,attribute:"icon-on"})],r.prototype,"iconOn",void 0),n([a({type:String})],r.prototype,"label",void 0),n([a({type:Boolean,reflect:!0})],r.prototype,"disabled",void 0),r=n([s("mega-icon-button")],r);export{r as IconButtonElement};
