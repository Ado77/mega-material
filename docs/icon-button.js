import{a as t,b as o,c as e,d as i,e as n,g as s,f as r}from"./common.js";import"./icon.js";import"./ripple.js";let l=class extends t{constructor(){super(...arguments),this.on=!1,this.icon="",this.iconOn="",this.label="",this.disabled=!1}static get styles(){return[o,e`:host{display:inline-block;contain:content}mwc-ripple{width:48px;height:48px}button{will-change:transform,opacity;width:48px;height:48px;padding:12px;font-size:24px;display:inline-block;position:relative;box-sizing:border-box;border:none;outline:0;background-color:transparent;fill:currentColor;color:inherit;text-decoration:none;cursor:pointer;user-select:none},::slotted(img) ::slotted(mwc-icon),::slotted(svg){width:24px;height:24px;display:inline-block}:host([on]) slot:not([name]){display:none}:host(:not([on])) slot[name]{display:none}:host:disabled{color:rgba(0,0,0,.38);color:var(--mdc-theme-text-disabled-on-light,rgba(0,0,0,.38));cursor:default;pointer-events:none}`]}render(){return i`<mwc-ripple unbounded><button aria-label=${this.label} aria-hidden=true aria-pressed=false><slot><mwc-icon>${this.icon}</mwc-icon></slot><slot name=on><mwc-icon>${this.iconOn}</mwc-icon></slot></button></mwc-ripple>`}};n([s({type:Boolean,reflect:!0})],l.prototype,"on",void 0),n([s({type:String})],l.prototype,"icon",void 0),n([s({type:String,attribute:"icon-on"})],l.prototype,"iconOn",void 0),n([s({type:String})],l.prototype,"label",void 0),n([s({type:Boolean,reflect:!0})],l.prototype,"disabled",void 0),l=n([r("mwc-icon-button")],l);export{l as IconButtonElement};
